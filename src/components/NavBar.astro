---
import { type MenuItemDefinition, Hamburger, MainMenu, DefaultSettings, type MainMenuSettings } from '@pbkware/astro-main-menu';
import { Icon } from 'astro-icon/components';

const menuItemDefinitions: MenuItemDefinition[] = [
    {
        text: 'Solutions',
        url: '/solutions/',
        children: [
            { text: 'Retail exchange', url: '/solutions/retail-exchange/' },
            { text: 'Brokerage trading', url: '/solutions/brokerage-trading/' },
            { text: 'Specialised exchange', url: '/solutions/specialised-exchange/' },
            { text: 'Market development', url: '/industry/market-development/' },
            { text: 'Trading componentry', url: '/solutions/trading-componentry/' },
            { text: 'Commercial Support', url: '/solutions/commercial-support/' },
        ],
    },
    {
        text: 'Documentation',
        url: '/getting-started/',
        children: [
            { text: 'Getting Started', url: '/getting-started/'},
            { text: 'Using', url: '/using/'},
            { text: 'Configuration', url: '/configuration/'},
            { text: 'Architecture', url: '/architecture/'},
            { text: 'External APIs', url: '/external-api/'},
            { text: 'Extensibility', url: '/extensibility/'},
            { text: 'Working with source', url: '/source/'},
            { text: 'Deploy', url: '/deploy/'},
        ]
    },
    {
        text: 'About',
        url: '/#about',
        title: 'About',
        children: [
            { text: 'Home', url: '/' },
            { text: 'Features', url: '/overviews/features/', title: 'Summary of Plxtra features' },
            { text: 'History', url: '/about/history/' },
            { text: 'Contact', url: '/about/contact/', title: 'Start a discussion, open an issue or engage with commercial support' },
        ],
    },
    { text: 'News', url: '/news/' },
];

const mainMenuSettings: MainMenuSettings = {
    // ...DefaultSettings.mainMenuSettings,
    wideMainMenuFontSize: '0.95em',
}
---

<nav class="navbar">
    <div class="navbar-narrow-left">
        <Icon name="plxtra-logo" id="navbar-narrow-left-icon" />
    </div>

    <div id="navbar-wide-left-under-construction">
        <div class="navbar-wide-left">
            <a href="/">
                <Icon name="plxtra-logo" id="navbar-wide-left-icon" />
            </a>
            <a href="/">
                <span id="logoOrgName">Plxtra</span>
            </a>
        </div>
        <span id="wide-under-construction-text">Under construction</span>
    </div>

    <div class="heading">
        <slot name="heading" />
    </div>

    <MainMenu id="main-menu" settings={mainMenuSettings}, menuItemDefinitions={menuItemDefinitions} />

    <div class="navbar-wide-right">
        <Hamburger settings={DefaultSettings.hamburgerSettings} />
    </div>
</nav>
<span id="narrow-under-construction-text">Under construction</span>

<style lang="scss" define:vars={{
    hamburgerWidth: DefaultSettings.hamburgerSettings.width,
}}>
    @use '@scss/breakpoint';
    @use '@scss/color';

    #narrow-under-construction-text {
        display: none;
        font-size: smaller;
        font-style: italic;

        @include breakpoint.createMainMenuConfigNarrowBreakpoint {
            display: block;
        }
    }

    .navbar {
        width: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: space-between;

        > .heading {
            display: none;
        }

        > .navbar-narrow-left {
            width: var(--hamburgerWidth, 1.8em);
            display: none;

            > #navbar-narrow-left-icon {
                height: 1.3lh;
            }
        }

        > #navbar-wide-left-under-construction {
            display: flex;
            flex-direction: column;

            > .navbar-wide-left {
                flex: 0 0 auto;
                display: flex;
                align-items: center;
                gap: .5em;

                > a {
                    > #navbar-wide-left-icon {
                        height: 1.3lh;
                    }
                }
                > a, a:visited, a:active, a:hover {
                    text-decoration-line: none !important;
                    color: inherit;
                    > #logoOrgName {
                        font-size: 1.5em;
                        font-weight: bold;
                    }
                }
            }

            > #wide-under-construction-text {
                font-size: smaller;
                font-style: italic;
            }
        }

        > #main-menu {
            @include breakpoint.createMainMenuConfigWideBreakpoint {
                margin-right: 1em;
            }
        }

        > .navbar-wide-right {
            display: none;
            align-items: center;
            flex: 0 0 auto;
        }

        @include breakpoint.createMainMenuConfigNarrowBreakpoint {
            > .heading {
                display: flex;
                align-items: center;
                font-size: smaller;
                color: color.get(color.$main-heading);
            }

            > .navbar-narrow-left {
                display: flex;
                align-items: center;
            }

            > #navbar-wide-left-under-construction, .navbar-wide-left {
                display: none;
            }

            > .navbar-wide-right {
                display: flex;
                width: var(--hamburgerWidth, 1.8em);
            }
        }

        @include breakpoint.createWiderOrEqual(breakpoint.$wide) {
            > .heading {
                display: flex;
                align-items: center;
                font-weight: bolder;
                font-size: 2.5rem;
                margin: 0;
                padding: .5rem 0;
                color: color.get(color.$main-heading);
            }
        }
    }
</style>

<script>
    import { MenuClickProcessor } from '@pbkware/astro-main-menu';
    const processor = MenuClickProcessor.get(); // This always needs to be called however only need processor if want to handle dataClick event

    // Hide narrow menu and hamburger if document is clicked outside menu
    document.addEventListener('click', (event) => {
        const target = event.target;
        if (target === null || !processor.isClickHandledEventTarget(target)) {
            processor.deactivateNarrow();
        }
    });
</script>
