---
import PlxtraIcon from '@icons/plxtra-logo.svg';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';

export interface Props {
    pageTitle: string;
    mainHeading?: string;
};

export const canonicalHost = 'plxtra.org'; // Defined in Astro Config. In future get this from environmental variable
export const canonicalSite = `https://${canonicalHost}/`;
const canonicalURl = new URL(Astro.url.pathname, canonicalSite);

let { pageTitle, mainHeading } = Astro.props;
const resolvedMainHeading = mainHeading ?? pageTitle;
---

<html lang="en" color-scheme="dark">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href={PlxtraIcon.src} />
        <link rel="canonical" href={canonicalURl} />
        <link rel="sitemap" href="/sitemap-index.xml" />
        <link href="/node_modules/@astrojs/starlight/style/reset.css" rel="stylesheet" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>{pageTitle}</title>
    </head>
    <body>
        <Header>
            <span slot="heading">{resolvedMainHeading}</span>
        </Header>

        <div id="mainHeadingAndContent">
            <p id="mainHeading">{resolvedMainHeading}</p>
            <main>
                <slot />
            </main>
        </div>
        <Footer />
    </body>
</html>

<style lang="scss" is:global>
    @use '@scss/color';
    @use '@scss/breakpoint';
    // Adornments
    @use '@scss/adornments/imprint';
    @use '@scss/adornments/banner';
    @use '@scss/adornments/paginated-blog-entry-summaries';
    @use '@scss/adornments/image-text-grid';
    @use '@scss/adornments/captioned-large-icon-strip';
    @use '@scss/adornments/light-bordered-table';
    @use '@scss/adornments/gridded-photoswipe-pages';
    @use '@adornments/unordered-list';

    h1 {
        margin: 1rem 0;
        font-size: 2rem;
        line-height: 1.1;
        color: color.get(color.$h1-heading);
    }

    h2 {
        margin: 1rem 0;
        font-size: 1.5rem;
        color: color.get(color.$h2-heading);
    }

    main {
        @include unordered-list.collapse-narrow;
    }

    @include breakpoint.create(breakpoint.$infinite) {
        // @include tags.infinite;
        // @include classes-ids.infinite;
        // @include wide-header.infinite;
        // @include narrow-header.infinite;
        // @include footer.infinite;
        @include imprint.infinite;
        @include banner.infinite;
        @include paginated-blog-entry-summaries.infinite;
        @include image-text-grid.infinite;
        @include captioned-large-icon-strip.infinite;
    }

    @include breakpoint.create(breakpoint.$wide) {
        // @include tags.wide;
        // @include classes-ids.wide;
        // @include wide-header.wide;
        // @include narrow-header.wide;
        // @include footer.wide;
        @include imprint.wide;
        @include banner.wide;
        @include paginated-blog-entry-summaries.wide;
        @include image-text-grid.wide;
        @include captioned-large-icon-strip.wide;
    }

    @include breakpoint.create(breakpoint.$normal) {
        // @include tags.normal;
        // @include classes-ids.normal;
        // @include wide-header.normal;
        // @include narrow-header.normal;
        // @include footer.normal;
        @include imprint.normal;
        @include banner.normal;
        @include paginated-blog-entry-summaries.normal;
        @include image-text-grid.normal;
        @include captioned-large-icon-strip.normal;
    }

    @include breakpoint.create(breakpoint.$narrow) {
        // @include tags.narrow;
        // @include classes-ids.narrow;
        // @include wide-header.narrow;
        // @include narrow-header.narrow;
        // @include footer.narrow;
        @include imprint.narrow;
        @include banner.narrow;
        @include paginated-blog-entry-summaries.narrow;
        @include image-text-grid.narrow;
        @include captioned-large-icon-strip.narrow;
    }

    @include breakpoint.create(breakpoint.$narrower) {
        // @include tags.narrower;
        // @include classes-ids.narrower;
        // @include wide-header.narrower;
        // @include narrow-header.narrower;
        // @include footer.narrower;
        @include imprint.narrower;
        @include banner.narrower;
        @include paginated-blog-entry-summaries.narrower;
        @include image-text-grid.narrower;
        @include captioned-large-icon-strip.narrower;
    }

    @include breakpoint.create(breakpoint.$mobile) {
        // @include tags.mobile;
        // @include classes-ids.mobile;
        // @include wide-header.mobile;
        // @include narrow-header.mobile;
        // @include footer.mobile;
        @include imprint.mobile;
        @include banner.mobile;
        @include paginated-blog-entry-summaries.mobile;
        @include image-text-grid.mobile;
        @include captioned-large-icon-strip.mobile;
    }

    @include breakpoint.create(breakpoint.$mobilep) {
        // @include tags.mobilep;
        // @include classes-ids.mobilep;
        // @include wide-header.mobilep;
        // @include narrow-header.mobilep;
        // @include footer.mobilep;
        @include imprint.mobilep;
        @include banner.mobilep;
        @include paginated-blog-entry-summaries.mobilep;
        @include image-text-grid.mobilep;
        @include captioned-large-icon-strip.mobilep;
    }

    a:link {
        color: color.get(color.$a-link);
    }
    a:visited {
        color: color.get(color.$a-visited);
    }
    a:hover {
        color: color.get(color.$a-hover);
    }
    a:active {
        color: color.get(color.$a-active);
    }

    .sl-anchor-link {
        display: none;
    }

</style>

<style lang="scss" define:vars={{
    $colorSchemeName: undefined,
}}>
    @use '@scss/color';
    @use '@scss/breakpoint';

    html {
        &[color-scheme=#{color.$dark-color-scheme-name}] {
            @include color.color-scheme-vars(color.$dark-color-scheme-name);
        }
        &[color-scheme=#{color.$light-color-scheme-name}] {
            @include color.color-scheme-vars(color.$light-color-scheme-name);
        }

        background-color: color.get(color.$main-background);
        color: color.get(color.$main-foreground);
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'
    }


    * {
        box-sizing: border-box;
    }

    body {
        margin: 0 auto;
        padding: 0;
        font-size: calc(15px + 0.390625vw);
        font-family: var(--__sl-font);
    }

    #mainHeadingAndContent {
        width: 100%;
        max-width: 80ch;
        margin: 0 auto;
        padding: 0 1rem;
        line-height: 1.5;

        @include breakpoint.create(breakpoint.$mobile) {
            padding: 0 .5rem;
        }

        @include breakpoint.create(breakpoint.$mobilep) {
            padding: 0 .4rem;
        }

        @include breakpoint.createNarrowerOrEqual(breakpoint.$slim) {
            padding: 0 .3rem;
        }

        #mainHeading {
            font-weight: bolder;
            font-size: 2.5rem;
            margin: 0;
            padding: .5rem 0;
            color: color.get(color.$main-heading);

            @include breakpoint.createMainMenuConfigNarrowBreakpoint {
                display: none;
            }
            @include breakpoint.createWiderOrEqual(breakpoint.$wide) {
                display: none;
            }
        }


        /* Table */
        table {
            display: block;
            overflow-x: auto;
            border-collapse: collapse;

            th,
            td {
                border: 1px solid darkslategrey;
                padding: .3em;
            }
        }
    }

</style>
